import math

class WindTurbineBlade:
    """
    Class representing a wind turbine blade.
    """

    def __init__(self, length: float):
        """
        Initializes the WindTurbineBlade object with a specific length.
        
        :param length: Length of the blade in meters.
        """
        if length <= 0:
            raise ValueError("The blade length must be greater than 0.")
        self.length = length
    
    @property
    def swept_area(self) -> float:
        """
        Calculates the swept area of the blade.
        
        :return: Swept area (m²).
        """
        return math.pi * (self.length ** 2)
    
    def generated_energy(self, air_density: float, wind_speed: float, efficiency: float) -> float:
        """
        Calculates the energy generated by the blade using the wind power formula.
        
        Formula: P = 0.5 * air_density * A * v³ * efficiency
        
        :param air_density: Air density (kg/m³), typically 1.225 kg/m³.
        :param wind_speed: Wind speed (m/s).
        :param efficiency: System efficiency (value between 0 and 1).
        :return: Generated power (W).
        """
        if wind_speed <= 0 or efficiency <= 0 or efficiency > 1:
            raise ValueError("Wind speed and efficiency must be greater than 0, and efficiency must be less than or equal to 1.")
        
        return 0.5 * air_density * self.swept_area * (wind_speed ** 3) * efficiency
    
    def __str__(self):
        """
        String representation of the object.
        """
        return f"Blade of {self.length} m - Swept area: {self.swept_area:.2f} m²"
